// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            String    @id @default(uuid())
  nome          String
  email         String
  senha         String
  criado_em     DateTime? @default(now())
  modificado_em DateTime? @default(now())

  @@map("usuario") // Ã© o que vai ser criado no banco
}

model Categoria {
  id            String    @id @default(uuid())
  nome          String
  criado_em     DateTime? @default(now())
  atualizado_em DateTime  @default(now())
  produtos      Produto[]

  @@map("categorias")
}

model Produto {
  id           String    @id @default(uuid())
  nome         String
  preco        String
  descricao    String
  banner       String
  criado_em    DateTime? @default(now())
  utilizado_em DateTime? @default(now())

  Categoria    Categoria? @relation(fields: [categoriaId], references: [id])
  categoriaId  String?
  id_categoria String
  items        Item[]

  @@map("produtos")
}

model Pedido {
  id       String  @id @default(uuid())
  mesa     Int
  status   Boolean @default(false)
  rascunho Boolean @default(true)
  nome     String?

  criado_em     DateTime? @default(now())
  atualizado_em DateTime  @default(now())

  items Item[]

  @@map("pedidos")
}

model Item {
  id         String @id @default(uuid())
  quantidade Int

  criado_em     DateTime? @default(now())
  atualizado_em DateTime? @default(now())

  Produto   Produto? @relation(fields: [produtoId], references: [id])
  produtoId String?
  Pedido    Pedido?  @relation(fields: [pedidoId], references: [id])
  pedidoId  String?

  @@map("items")
}
